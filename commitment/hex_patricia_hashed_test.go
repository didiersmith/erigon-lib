/*
   Copyright 2022 Erigon contributors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

package commitment

import (
	"encoding/hex"
	"fmt"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestEmptyState(t *testing.T) {
	ms := NewMockState(t)
	hph := NewHexPatriciaHashed(1, ms.branchFn, ms.accountFn, ms.storageFn)
	hph.SetTrace(false)
	plainKeys, hashedKeys, updates := NewUpdateBuilder().
		Balance("00", 4).
		Balance("01", 5).
		Balance("02", 6).
		Balance("03", 7).
		Balance("04", 8).
		Storage("04", "01", "0401").
		Storage("03", "56", "050505").
		Storage("03", "57", "060606").
		Balance("05", 9).
		Storage("05", "02", "8989").
		Storage("05", "04", "9898").
		Build()

	err := ms.applyPlainUpdates(plainKeys, updates)
	require.NoError(t, err)

	rootHash, branchNodeUpdates, err := hph.ReviewKeys(plainKeys, hashedKeys)
	require.NoError(t, err)

	t.Logf("root hash %x\n", rootHash)

	ms.applyBranchNodeUpdates(branchNodeUpdates)

	fmt.Printf("1. Generated updates\n")
	renderUpdates(branchNodeUpdates)

	// More updates
	hph.Reset()
	hph.SetTrace(false)
	plainKeys, hashedKeys, updates = NewUpdateBuilder().
		Storage("03", "58", "050505").
		Build()
	if err := ms.applyPlainUpdates(plainKeys, updates); err != nil {
		t.Fatal(err)
	}
	_, branchNodeUpdates, err = hph.ReviewKeys(plainKeys, hashedKeys)
	if err != nil {
		t.Fatal(err)
	}
	ms.applyBranchNodeUpdates(branchNodeUpdates)
	fmt.Printf("2. Generated updates\n")
	renderUpdates(branchNodeUpdates)

	// More updates
	hph.Reset()
	hph.SetTrace(false)
	plainKeys, hashedKeys, updates = NewUpdateBuilder().
		Storage("03", "58", "070807").
		Build()
	if err := ms.applyPlainUpdates(plainKeys, updates); err != nil {
		t.Fatal(err)
	}
	_, branchNodeUpdates, err = hph.ReviewKeys(plainKeys, hashedKeys)
	require.NoError(t, err)

	ms.applyBranchNodeUpdates(branchNodeUpdates)
	fmt.Printf("3. Generated updates\n")
	renderUpdates(branchNodeUpdates)
}

func Test_HexPatriciaHashed_EmptyUpdateState(t *testing.T) {
	ms := NewMockState(t)
	hph := NewHexPatriciaHashed(1, ms.branchFn, ms.accountFn, ms.storageFn)
	hph.SetTrace(false)
	plainKeys, hashedKeys, updates := NewUpdateBuilder().
		Balance("00", 4).
		Nonce("00", 246462653).
		Balance("01", 5).
		CodeHash("03", "aaaaaaaaaaf7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a870").
		Delete("00").
		Storage("04", "01", "0401").
		Storage("03", "56", "050505").
		Build()

	err := ms.applyPlainUpdates(plainKeys, updates)
	require.NoError(t, err)

	hashBeforeEmptyUpdate, branchNodeUpdates, err := hph.ReviewKeys(plainKeys, hashedKeys)
	require.NoError(t, err)
	require.NotEmpty(t, hashBeforeEmptyUpdate)

	ms.applyBranchNodeUpdates(branchNodeUpdates)

	fmt.Println("1. Updates applied")
	renderUpdates(branchNodeUpdates)

	// generate empty updates and do NOT reset tree
	hph.SetTrace(true)

	plainKeys, hashedKeys, updates = NewUpdateBuilder().Build()

	err = ms.applyPlainUpdates(plainKeys, updates)
	require.NoError(t, err)

	hashAfterEmptyUpdate, branchNodeUpdates, err := hph.ReviewKeys(plainKeys, hashedKeys)
	require.NoError(t, err)

	ms.applyBranchNodeUpdates(branchNodeUpdates)
	fmt.Println("2. Empty updates applied without state reset")

	require.EqualValues(t, hashBeforeEmptyUpdate, hashAfterEmptyUpdate)
}

func Test_HexPatriciaHashed_ProcessUpdates_UniqueRepresentation(t *testing.T) {
	ms := NewMockState(t)
	ms2 := NewMockState(t)

	plainKeys, hashedKeys, updates := NewUpdateBuilder().
		Balance("f4", 4).
		Balance("ff", 900234).
		Balance("04", 1233).
		Storage("04", "01", "0401").
		Balance("ba", 065606).
		Balance("00", 4).
		Balance("01", 5).
		Balance("02", 6).
		Balance("03", 7).
		Storage("03", "56", "050505").
		Balance("05", 9).
		Storage("03", "87", "060606").
		Balance("b9", 6).
		Nonce("ff", 169356).
		Storage("05", "02", "8989").
		Storage("f5", "04", "9898").
		Build()

	trieOne := NewHexPatriciaHashed(1, ms.branchFn, ms.accountFn, ms.storageFn)
	trieTwo := NewHexPatriciaHashed(1, ms2.branchFn, ms2.accountFn, ms2.storageFn)

	trieOne.SetTrace(true)
	trieTwo.SetTrace(true)

	// single sequential update
	roots := make([][]byte, 0)
	// branchNodeUpdatesOne := make(map[string]BranchData)
	fmt.Printf("1. Trie sequential update generated following branch updates\n")
	for i := 0; i < len(updates); i++ {
		if err := ms.applyPlainUpdates(plainKeys[i:i+1], updates[i:i+1]); err != nil {
			t.Fatal(err)
		}

		sequentialRoot, branchNodeUpdates, err := trieOne.ReviewKeys(plainKeys[i:i+1], hashedKeys[i:i+1])
		require.NoError(t, err)
		roots = append(roots, sequentialRoot)

		ms.applyBranchNodeUpdates(branchNodeUpdates)
		renderUpdates(branchNodeUpdates)
	}

	err := ms2.applyPlainUpdates(plainKeys, updates)
	require.NoError(t, err)

	fmt.Printf("\n2. Trie batch update generated following branch updates\n")
	// batch update
	batchRoot, branchNodeUpdatesTwo, err := trieTwo.ReviewKeys(plainKeys, hashedKeys)
	require.NoError(t, err)
	renderUpdates(branchNodeUpdatesTwo)

	fmt.Printf("\n sequential roots:\n")
	for i, rh := range roots {
		fmt.Printf("%2d %+v\n", i, hex.EncodeToString(rh))
	}

	ms2.applyBranchNodeUpdates(branchNodeUpdatesTwo)

	require.EqualValues(t, batchRoot, roots[len(roots)-1],
		"expected equal roots, got sequential [%v] != batch [%v]", hex.EncodeToString(roots[len(roots)-1]), hex.EncodeToString(batchRoot))
	require.Lenf(t, batchRoot, 32, "root hash length should be equal to 32 bytes")
}

type TestData struct {
	expectedRoot string
	balances     map[string][]byte
}

func CheckGenesis(t *testing.T, testdata []TestData) {
	t.Helper()
	ms := NewMockState(t)

	for _, testData := range testdata {
		hph := NewHexPatriciaHashed(20, ms.branchFn, ms.accountFn, ms.storageFn)
		hph.SetTrace(true)

		builder := NewUpdateBuilder()

		for address, balance := range testData.balances {
			builder.Balance256(address, balance)
		}
		plainKeys, hashedKeys, updates := builder.Build()

		if err := ms.applyPlainUpdates(plainKeys, updates); err != nil {
			t.Fatal(err)
		}
		rootHash, branchNodeUpdates, err := hph.ReviewKeys(plainKeys, hashedKeys)
		if err != nil {
			t.Fatal(err)
		}
		ms.applyBranchNodeUpdates(branchNodeUpdates)

		require.EqualValues(t, testData.expectedRoot, fmt.Sprintf("%x", rootHash))
	}
}

func Test_Sepolia(t *testing.T) {
	CheckGenesis(t, []TestData{
		{
			"5eb6e371a698b8d68f665192350ffcecbbbf322916f4b51bd79bb6887da3f494",
			map[string][]byte{
				"a2a6d93439144ffe4d27c9e088dcd8b783946263": []byte{0xd3, 0xc2, 0x1b, 0xce, 0xcc, 0xed, 0xa1, 0x00, 0x00, 0x00},
				"bc11295936aa79d594139de1b2e12629414f3bdb": []byte{0xd3, 0xc2, 0x1b, 0xce, 0xcc, 0xed, 0xa1, 0x00, 0x00, 0x00},
				"7cf5b79bfe291a67ab02b393e456ccc4c266f753": []byte{0xd3, 0xc2, 0x1b, 0xce, 0xcc, 0xed, 0xa1, 0x00, 0x00, 0x00},
				"aaec86394441f915bce3e6ab399977e9906f3b69": []byte{0xd3, 0xc2, 0x1b, 0xce, 0xcc, 0xed, 0xa1, 0x00, 0x00, 0x00},
				"f47cae1cf79ca6758bfc787dbd21e6bdbe7112b8": []byte{0xd3, 0xc2, 0x1b, 0xce, 0xcc, 0xed, 0xa1, 0x00, 0x00, 0x00},
				"d7eddb78ed295b3c9629240e8924fb8d8874ddd8": []byte{0xd3, 0xc2, 0x1b, 0xce, 0xcc, 0xed, 0xa1, 0x00, 0x00, 0x00},
				"8b7f0977bb4f0fbe7076fa22bc24aca043583f5e": []byte{0xd3, 0xc2, 0x1b, 0xce, 0xcc, 0xed, 0xa1, 0x00, 0x00, 0x00},
				"e2e2659028143784d557bcec6ff3a0721048880a": []byte{0xd3, 0xc2, 0x1b, 0xce, 0xcc, 0xed, 0xa1, 0x00, 0x00, 0x00},
				"d9a5179f091d85051d3c982785efd1455cec8699": []byte{0xd3, 0xc2, 0x1b, 0xce, 0xcc, 0xed, 0xa1, 0x00, 0x00, 0x00},
				"beef32ca5b9a198d27b4e02f4c70439fe60356cf": []byte{0xd3, 0xc2, 0x1b, 0xce, 0xcc, 0xed, 0xa1, 0x00, 0x00, 0x00},
				"0000006916a87b82333f4245046623b23794c65c": []byte{0x08, 0x45, 0x95, 0x16, 0x14, 0x01, 0x48, 0x4a, 0x00, 0x00, 0x00},
				"b21c33de1fab3fa15499c62b59fe0cc3250020d1": []byte{0x52, 0xb7, 0xd2, 0xdc, 0xc8, 0x0c, 0xd2, 0xe4, 0x00, 0x00, 0x00},
				"10f5d45854e038071485ac9e402308cf80d2d2fe": []byte{0x52, 0xb7, 0xd2, 0xdc, 0xc8, 0x0c, 0xd2, 0xe4, 0x00, 0x00, 0x00},
				"d7d76c58b3a519e9fa6cc4d22dc017259bc49f1e": []byte{0x52, 0xb7, 0xd2, 0xdc, 0xc8, 0x0c, 0xd2, 0xe4, 0x00, 0x00, 0x00},
				"799d329e5f583419167cd722962485926e338f4a": []byte{0x0d, 0xe0, 0xb6, 0xb3, 0xa7, 0x64, 0x00, 0x00},
			},
		},
		{
			"c91d4ecd59dce3067d340b3aadfc0542974b4fb4db98af39f980a91ea00db9dc",
			map[string][]byte{
				"2f14582947e292a2ecd20c430b46f2d27cfe213c": []byte{0x1B, 0xC1, 0x6D, 0x67, 0x4E, 0xC8, 0x00, 0x00},
			},
		},
		// {
		// 	"c91d4ecd59dce3067d340b3aadfc0542974b4fb4db98af39f980a91ea00db9dc",
		// 	map[string][]byte{},
		// },
		// {
		// 	"c91d4ecd59dce3067d340b3aadfc0542974b4fb4db98af39f980a91ea00db9dc",
		// 	map[string][]byte{
		// 		"2f14582947e292a2ecd20c430b46f2d27cfe213c": []byte{0x1B, 0xC1, 0x6D, 0x67, 0x4E, 0xC8, 0x00, 0x00},
		// 	},
		// },
		// {
		// 	"1a6f6e131d93e4ba1cc27ddd8e764b303247959e9adcf744158377b923a38e5f",
		// 	map[string][]byte{
		// 		"2f14582947e292a2ecd20c430b46f2d27cfe213c": []byte{0x37, 0x82, 0xDA, 0xCE, 0x9D, 0x90, 0x00, 0x00},
		// 	},
		// },
	})
}

func Test_Goerli(t *testing.T) {
	CheckGenesis(t, []TestData{
		{
			"5d6cded585e73c4e322c30c2f782a336316f17dd85a4863b9d838d2d4b8b3008",
			map[string][]byte{
				"0000000000000000000000000000000000000000": []byte{0x01},
				"0000000000000000000000000000000000000001": []byte{0x01},
				"0000000000000000000000000000000000000002": []byte{0x01},
				"0000000000000000000000000000000000000003": []byte{0x01},
				"0000000000000000000000000000000000000004": []byte{0x01},
				"0000000000000000000000000000000000000005": []byte{0x01},
				"0000000000000000000000000000000000000006": []byte{0x01},
				"0000000000000000000000000000000000000007": []byte{0x01},
				"0000000000000000000000000000000000000008": []byte{0x01},
				"0000000000000000000000000000000000000009": []byte{0x01},
				"000000000000000000000000000000000000000a": []byte{0x01},
				"000000000000000000000000000000000000000b": []byte{0x01},
				"000000000000000000000000000000000000000c": []byte{0x01},
				"000000000000000000000000000000000000000d": []byte{0x01},
				"000000000000000000000000000000000000000e": []byte{0x01},
				"000000000000000000000000000000000000000f": []byte{0x01},
				"0000000000000000000000000000000000000010": []byte{0x01},
				"0000000000000000000000000000000000000011": []byte{0x01},
				"0000000000000000000000000000000000000012": []byte{0x01},
				"0000000000000000000000000000000000000013": []byte{0x01},
				"0000000000000000000000000000000000000014": []byte{0x01},
				"0000000000000000000000000000000000000015": []byte{0x01},
				"0000000000000000000000000000000000000016": []byte{0x01},
				"0000000000000000000000000000000000000017": []byte{0x01},
				"0000000000000000000000000000000000000018": []byte{0x01},
				"0000000000000000000000000000000000000019": []byte{0x01},
				"000000000000000000000000000000000000001a": []byte{0x01},
				"000000000000000000000000000000000000001b": []byte{0x01},
				"000000000000000000000000000000000000001c": []byte{0x01},
				"000000000000000000000000000000000000001d": []byte{0x01},
				"000000000000000000000000000000000000001e": []byte{0x01},
				"000000000000000000000000000000000000001f": []byte{0x01},
				"0000000000000000000000000000000000000020": []byte{0x01},
				"0000000000000000000000000000000000000021": []byte{0x01},
				"0000000000000000000000000000000000000022": []byte{0x01},
				"0000000000000000000000000000000000000023": []byte{0x01},
				"0000000000000000000000000000000000000024": []byte{0x01},
				"0000000000000000000000000000000000000025": []byte{0x01},
				"0000000000000000000000000000000000000026": []byte{0x01},
				"0000000000000000000000000000000000000027": []byte{0x01},
				"0000000000000000000000000000000000000028": []byte{0x01},
				"0000000000000000000000000000000000000029": []byte{0x01},
				"000000000000000000000000000000000000002a": []byte{0x01},
				"000000000000000000000000000000000000002b": []byte{0x01},
				"000000000000000000000000000000000000002c": []byte{0x01},
				"000000000000000000000000000000000000002d": []byte{0x01},
				"000000000000000000000000000000000000002e": []byte{0x01},
				"000000000000000000000000000000000000002f": []byte{0x01},
				"0000000000000000000000000000000000000030": []byte{0x01},
				"0000000000000000000000000000000000000031": []byte{0x01},
				"0000000000000000000000000000000000000032": []byte{0x01},
				"0000000000000000000000000000000000000033": []byte{0x01},
				"0000000000000000000000000000000000000034": []byte{0x01},
				"0000000000000000000000000000000000000035": []byte{0x01},
				"0000000000000000000000000000000000000036": []byte{0x01},
				"0000000000000000000000000000000000000037": []byte{0x01},
				"0000000000000000000000000000000000000038": []byte{0x01},
				"0000000000000000000000000000000000000039": []byte{0x01},
				"000000000000000000000000000000000000003a": []byte{0x01},
				"000000000000000000000000000000000000003b": []byte{0x01},
				"000000000000000000000000000000000000003c": []byte{0x01},
				"000000000000000000000000000000000000003d": []byte{0x01},
				"000000000000000000000000000000000000003e": []byte{0x01},
				"000000000000000000000000000000000000003f": []byte{0x01},
				"0000000000000000000000000000000000000040": []byte{0x01},
				"0000000000000000000000000000000000000041": []byte{0x01},
				"0000000000000000000000000000000000000042": []byte{0x01},
				"0000000000000000000000000000000000000043": []byte{0x01},
				"0000000000000000000000000000000000000044": []byte{0x01},
				"0000000000000000000000000000000000000045": []byte{0x01},
				"0000000000000000000000000000000000000046": []byte{0x01},
				"0000000000000000000000000000000000000047": []byte{0x01},
				"0000000000000000000000000000000000000048": []byte{0x01},
				"0000000000000000000000000000000000000049": []byte{0x01},
				"000000000000000000000000000000000000004a": []byte{0x01},
				"000000000000000000000000000000000000004b": []byte{0x01},
				"000000000000000000000000000000000000004c": []byte{0x01},
				"000000000000000000000000000000000000004d": []byte{0x01},
				"000000000000000000000000000000000000004e": []byte{0x01},
				"000000000000000000000000000000000000004f": []byte{0x01},
				"0000000000000000000000000000000000000050": []byte{0x01},
				"0000000000000000000000000000000000000051": []byte{0x01},
				"0000000000000000000000000000000000000052": []byte{0x01},
				"0000000000000000000000000000000000000053": []byte{0x01},
				"0000000000000000000000000000000000000054": []byte{0x01},
				"0000000000000000000000000000000000000055": []byte{0x01},
				"0000000000000000000000000000000000000056": []byte{0x01},
				"0000000000000000000000000000000000000057": []byte{0x01},
				"0000000000000000000000000000000000000058": []byte{0x01},
				"0000000000000000000000000000000000000059": []byte{0x01},
				"000000000000000000000000000000000000005a": []byte{0x01},
				"000000000000000000000000000000000000005b": []byte{0x01},
				"000000000000000000000000000000000000005c": []byte{0x01},
				"000000000000000000000000000000000000005d": []byte{0x01},
				"000000000000000000000000000000000000005e": []byte{0x01},
				"000000000000000000000000000000000000005f": []byte{0x01},
				"0000000000000000000000000000000000000060": []byte{0x01},
				"0000000000000000000000000000000000000061": []byte{0x01},
				"0000000000000000000000000000000000000062": []byte{0x01},
				"0000000000000000000000000000000000000063": []byte{0x01},
				"0000000000000000000000000000000000000064": []byte{0x01},
				"0000000000000000000000000000000000000065": []byte{0x01},
				"0000000000000000000000000000000000000066": []byte{0x01},
				"0000000000000000000000000000000000000067": []byte{0x01},
				"0000000000000000000000000000000000000068": []byte{0x01},
				"0000000000000000000000000000000000000069": []byte{0x01},
				"000000000000000000000000000000000000006a": []byte{0x01},
				"000000000000000000000000000000000000006b": []byte{0x01},
				"000000000000000000000000000000000000006c": []byte{0x01},
				"000000000000000000000000000000000000006d": []byte{0x01},
				"000000000000000000000000000000000000006e": []byte{0x01},
				"000000000000000000000000000000000000006f": []byte{0x01},
				"0000000000000000000000000000000000000070": []byte{0x01},
				"0000000000000000000000000000000000000071": []byte{0x01},
				"0000000000000000000000000000000000000072": []byte{0x01},
				"0000000000000000000000000000000000000073": []byte{0x01},
				"0000000000000000000000000000000000000074": []byte{0x01},
				"0000000000000000000000000000000000000075": []byte{0x01},
				"0000000000000000000000000000000000000076": []byte{0x01},
				"0000000000000000000000000000000000000077": []byte{0x01},
				"0000000000000000000000000000000000000078": []byte{0x01},
				"0000000000000000000000000000000000000079": []byte{0x01},
				"000000000000000000000000000000000000007a": []byte{0x01},
				"000000000000000000000000000000000000007b": []byte{0x01},
				"000000000000000000000000000000000000007c": []byte{0x01},
				"000000000000000000000000000000000000007d": []byte{0x01},
				"000000000000000000000000000000000000007e": []byte{0x01},
				"000000000000000000000000000000000000007f": []byte{0x01},
				"0000000000000000000000000000000000000080": []byte{0x01},
				"0000000000000000000000000000000000000081": []byte{0x01},
				"0000000000000000000000000000000000000082": []byte{0x01},
				"0000000000000000000000000000000000000083": []byte{0x01},
				"0000000000000000000000000000000000000084": []byte{0x01},
				"0000000000000000000000000000000000000085": []byte{0x01},
				"0000000000000000000000000000000000000086": []byte{0x01},
				"0000000000000000000000000000000000000087": []byte{0x01},
				"0000000000000000000000000000000000000088": []byte{0x01},
				"0000000000000000000000000000000000000089": []byte{0x01},
				"000000000000000000000000000000000000008a": []byte{0x01},
				"000000000000000000000000000000000000008b": []byte{0x01},
				"000000000000000000000000000000000000008c": []byte{0x01},
				"000000000000000000000000000000000000008d": []byte{0x01},
				"000000000000000000000000000000000000008e": []byte{0x01},
				"000000000000000000000000000000000000008f": []byte{0x01},
				"0000000000000000000000000000000000000090": []byte{0x01},
				"0000000000000000000000000000000000000091": []byte{0x01},
				"0000000000000000000000000000000000000092": []byte{0x01},
				"0000000000000000000000000000000000000093": []byte{0x01},
				"0000000000000000000000000000000000000094": []byte{0x01},
				"0000000000000000000000000000000000000095": []byte{0x01},
				"0000000000000000000000000000000000000096": []byte{0x01},
				"0000000000000000000000000000000000000097": []byte{0x01},
				"0000000000000000000000000000000000000098": []byte{0x01},
				"0000000000000000000000000000000000000099": []byte{0x01},
				"000000000000000000000000000000000000009a": []byte{0x01},
				"000000000000000000000000000000000000009b": []byte{0x01},
				"000000000000000000000000000000000000009c": []byte{0x01},
				"000000000000000000000000000000000000009d": []byte{0x01},
				"000000000000000000000000000000000000009e": []byte{0x01},
				"000000000000000000000000000000000000009f": []byte{0x01},
				"00000000000000000000000000000000000000a0": []byte{0x01},
				"00000000000000000000000000000000000000a1": []byte{0x01},
				"00000000000000000000000000000000000000a2": []byte{0x01},
				"00000000000000000000000000000000000000a3": []byte{0x01},
				"00000000000000000000000000000000000000a4": []byte{0x01},
				"00000000000000000000000000000000000000a5": []byte{0x01},
				"00000000000000000000000000000000000000a6": []byte{0x01},
				"00000000000000000000000000000000000000a7": []byte{0x01},
				"00000000000000000000000000000000000000a8": []byte{0x01},
				"00000000000000000000000000000000000000a9": []byte{0x01},
				"00000000000000000000000000000000000000aa": []byte{0x01},
				"00000000000000000000000000000000000000ab": []byte{0x01},
				"00000000000000000000000000000000000000ac": []byte{0x01},
				"00000000000000000000000000000000000000ad": []byte{0x01},
				"00000000000000000000000000000000000000ae": []byte{0x01},
				"00000000000000000000000000000000000000af": []byte{0x01},
				"00000000000000000000000000000000000000b0": []byte{0x01},
				"00000000000000000000000000000000000000b1": []byte{0x01},
				"00000000000000000000000000000000000000b2": []byte{0x01},
				"00000000000000000000000000000000000000b3": []byte{0x01},
				"00000000000000000000000000000000000000b4": []byte{0x01},
				"00000000000000000000000000000000000000b5": []byte{0x01},
				"00000000000000000000000000000000000000b6": []byte{0x01},
				"00000000000000000000000000000000000000b7": []byte{0x01},
				"00000000000000000000000000000000000000b8": []byte{0x01},
				"00000000000000000000000000000000000000b9": []byte{0x01},
				"00000000000000000000000000000000000000ba": []byte{0x01},
				"00000000000000000000000000000000000000bb": []byte{0x01},
				"00000000000000000000000000000000000000bc": []byte{0x01},
				"00000000000000000000000000000000000000bd": []byte{0x01},
				"00000000000000000000000000000000000000be": []byte{0x01},
				"00000000000000000000000000000000000000bf": []byte{0x01},
				"00000000000000000000000000000000000000c0": []byte{0x01},
				"00000000000000000000000000000000000000c1": []byte{0x01},
				"00000000000000000000000000000000000000c2": []byte{0x01},
				"00000000000000000000000000000000000000c3": []byte{0x01},
				"00000000000000000000000000000000000000c4": []byte{0x01},
				"00000000000000000000000000000000000000c5": []byte{0x01},
				"00000000000000000000000000000000000000c6": []byte{0x01},
				"00000000000000000000000000000000000000c7": []byte{0x01},
				"00000000000000000000000000000000000000c8": []byte{0x01},
				"00000000000000000000000000000000000000c9": []byte{0x01},
				"00000000000000000000000000000000000000ca": []byte{0x01},
				"00000000000000000000000000000000000000cb": []byte{0x01},
				"00000000000000000000000000000000000000cc": []byte{0x01},
				"00000000000000000000000000000000000000cd": []byte{0x01},
				"00000000000000000000000000000000000000ce": []byte{0x01},
				"00000000000000000000000000000000000000cf": []byte{0x01},
				"00000000000000000000000000000000000000d0": []byte{0x01},
				"00000000000000000000000000000000000000d1": []byte{0x01},
				"00000000000000000000000000000000000000d2": []byte{0x01},
				"00000000000000000000000000000000000000d3": []byte{0x01},
				"00000000000000000000000000000000000000d4": []byte{0x01},
				"00000000000000000000000000000000000000d5": []byte{0x01},
				"00000000000000000000000000000000000000d6": []byte{0x01},
				"00000000000000000000000000000000000000d7": []byte{0x01},
				"00000000000000000000000000000000000000d8": []byte{0x01},
				"00000000000000000000000000000000000000d9": []byte{0x01},
				"00000000000000000000000000000000000000da": []byte{0x01},
				"00000000000000000000000000000000000000db": []byte{0x01},
				"00000000000000000000000000000000000000dc": []byte{0x01},
				"00000000000000000000000000000000000000dd": []byte{0x01},
				"00000000000000000000000000000000000000de": []byte{0x01},
				"00000000000000000000000000000000000000df": []byte{0x01},
				"00000000000000000000000000000000000000e0": []byte{0x01},
				"00000000000000000000000000000000000000e1": []byte{0x01},
				"00000000000000000000000000000000000000e2": []byte{0x01},
				"00000000000000000000000000000000000000e3": []byte{0x01},
				"00000000000000000000000000000000000000e4": []byte{0x01},
				"00000000000000000000000000000000000000e5": []byte{0x01},
				"00000000000000000000000000000000000000e6": []byte{0x01},
				"00000000000000000000000000000000000000e7": []byte{0x01},
				"00000000000000000000000000000000000000e8": []byte{0x01},
				"00000000000000000000000000000000000000e9": []byte{0x01},
				"00000000000000000000000000000000000000ea": []byte{0x01},
				"00000000000000000000000000000000000000eb": []byte{0x01},
				"00000000000000000000000000000000000000ec": []byte{0x01},
				"00000000000000000000000000000000000000ed": []byte{0x01},
				"00000000000000000000000000000000000000ee": []byte{0x01},
				"00000000000000000000000000000000000000ef": []byte{0x01},
				"00000000000000000000000000000000000000f0": []byte{0x01},
				"00000000000000000000000000000000000000f1": []byte{0x01},
				"00000000000000000000000000000000000000f2": []byte{0x01},
				"00000000000000000000000000000000000000f3": []byte{0x01},
				"00000000000000000000000000000000000000f4": []byte{0x01},
				"00000000000000000000000000000000000000f5": []byte{0x01},
				"00000000000000000000000000000000000000f6": []byte{0x01},
				"00000000000000000000000000000000000000f7": []byte{0x01},
				"00000000000000000000000000000000000000f8": []byte{0x01},
				"00000000000000000000000000000000000000f9": []byte{0x01},
				"00000000000000000000000000000000000000fa": []byte{0x01},
				"00000000000000000000000000000000000000fb": []byte{0x01},
				"00000000000000000000000000000000000000fc": []byte{0x01},
				"00000000000000000000000000000000000000fd": []byte{0x01},
				"00000000000000000000000000000000000000fe": []byte{0x01},
				"00000000000000000000000000000000000000ff": []byte{0x01},
				"4c2ae482593505f0163cdefc073e81c63cda4107": []byte{0x15, 0x2d, 0x02, 0xc7, 0xe1, 0x4a, 0xf6, 0x80, 0x00, 0x00},
				"a8e8f14732658e4b51e8711931053a8a69baf2b1": []byte{0x15, 0x2d, 0x02, 0xc7, 0xe1, 0x4a, 0xf6, 0x80, 0x00, 0x00},
				"d9a5179f091d85051d3c982785efd1455cec8699": []byte{0x08, 0x45, 0x95, 0x16, 0x14, 0x01, 0x48, 0x4a, 0x00, 0x00, 0x00},
				"e0a2bd4258d2768837baa26a28fe71dc079f84c7": []byte{0x4a, 0x47, 0xe3, 0xc1, 0x24, 0x48, 0xf4, 0xad, 0x00, 0x00, 0x00},
			},
		},
	})
}
